plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.9.25'
    id 'org.jetbrains.kotlin.plugin.spring' version '1.9.25'
    id 'org.springframework.boot' version '3.3.3'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'org.jooq.jooq-codegen-gradle' version '3.19.11'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.micrometer:micrometer-registry-prometheus'
    implementation 'org.springframework.boot:spring-boot-starter-data-r2dbc'
    implementation 'org.springframework.boot:spring-boot-starter-jooq'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
    implementation 'io.projectreactor.kotlin:reactor-kotlin-extensions'
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-reactor'
    implementation 'org.liquibase:liquibase-core'
    implementation 'org.springframework:spring-jdbc'
    implementation 'io.github.microutils:kotlin-logging-jvm:3.0.5'
    implementation 'org.springframework.boot:spring-boot-starter-validation:3.3.3'
    implementation 'jakarta.validation:jakarta.validation-api:3.1.0'
    implementation 'org.jooq:jooq:3.19.11'
    implementation 'org.jooq:jooq-meta:3.19.11'
    implementation 'com.auth0:java-jwt:4.4.0'
    implementation(platform("io.micrometer:micrometer-tracing-bom:1.3.4"))
    implementation("io.micrometer:micrometer-tracing-bridge-otel")
    implementation("io.opentelemetry:opentelemetry-exporter-otlp")
    implementation("com.github.loki4j:loki-logback-appender:1.6.0-m1")

    jooqCodegen("org.postgresql:postgresql")
    runtimeOnly 'org.postgresql:r2dbc-postgresql'
    runtimeOnly 'org.postgresql:postgresql'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit5'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation("io.mockk:mockk:1.13.12")
    testImplementation("com.ninja-squad:springmockk:4.0.2")
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation 'org.testcontainers:postgresql:1.20.1'
    testImplementation 'org.testcontainers:r2dbc:1.20.1'
    testImplementation "org.testcontainers:junit-jupiter:1.20.1"
    implementation 'com.maciejwalkowiak.spring:wiremock-spring-boot:2.1.2'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

kotlin {
    compilerOptions {
        freeCompilerArgs.addAll '-Xjsr305=strict'
    }
}

jooq {
    configuration {
        generator {
            database {
                name = "org.jooq.meta.postgres.PostgresDatabase"
                includes = ".*"
                excludes = """
           	          databasechangelog 
           	        | databasechangeloglock       
                """
                inputSchema = "advertisement"
                forcedTypes {
                    forcedType {

                        // Specify any data type that is supported in your database, or if unsupported,
                        // a type from org.jooq.impl.SQLDataType
                        name = "INSTANT"

                        // A Java regex matching fully-qualified columns, attributes, parameters. Use the pipe to separate several expressions.
                        types = "TIMESTAMPTZ"
                    }
                }
            }
			name = "org.jooq.codegen.KotlinGenerator"
            target {
                packageName = "com.advertisement.auth.model.jooq"
            }
        }
        jdbc {
            driver = "${dbDriver}"
            url = "${dbUrl}"
            user = "${dbUsername}"
            password = "${dbPassword}"
        }
    }
}

tasks.named('test') {
    useJUnitPlatform()
}
