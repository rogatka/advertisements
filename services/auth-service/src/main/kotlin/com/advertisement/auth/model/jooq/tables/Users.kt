/*
 * This file is generated by jOOQ.
 */
package com.advertisement.auth.model.jooq.tables


import com.advertisement.auth.model.jooq.Advertisement
import com.advertisement.auth.model.jooq.keys.REFRESH_TOKEN__REFRESH_TOKEN_USER_ID_FK
import com.advertisement.auth.model.jooq.keys.USERS_PHONE_KEY
import com.advertisement.auth.model.jooq.keys.USERS_PKEY
import com.advertisement.auth.model.jooq.keys.USERS_ROLES__USER_ID_FK
import com.advertisement.auth.model.jooq.tables.RefreshToken.RefreshTokenPath
import com.advertisement.auth.model.jooq.tables.UsersRoles.UsersRolesPath
import com.advertisement.auth.model.jooq.tables.records.UsersRecord

import java.time.Instant
import java.util.UUID

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Users(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, UsersRecord>?,
    parentPath: InverseForeignKey<out Record, UsersRecord>?,
    aliased: Table<UsersRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<UsersRecord>(
    alias,
    Advertisement.ADVERTISEMENT,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>advertisement.users</code>
         */
        val USERS: Users = Users()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<UsersRecord> = UsersRecord::class.java

    /**
     * The column <code>advertisement.users.id</code>.
     */
    val ID: TableField<UsersRecord, UUID?> = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>advertisement.users.phone</code>.
     */
    val PHONE: TableField<UsersRecord, String?> = createField(DSL.name("phone"), SQLDataType.VARCHAR(50).nullable(false), this, "")

    /**
     * The column <code>advertisement.users.first_name</code>.
     */
    val FIRST_NAME: TableField<UsersRecord, String?> = createField(DSL.name("first_name"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>advertisement.users.last_name</code>.
     */
    val LAST_NAME: TableField<UsersRecord, String?> = createField(DSL.name("last_name"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>advertisement.users.created_at</code>.
     */
    val CREATED_AT: TableField<UsersRecord, Instant?> = createField(DSL.name("created_at"), SQLDataType.INSTANT.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<UsersRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<UsersRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<UsersRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>advertisement.users</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>advertisement.users</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>advertisement.users</code> table reference
     */
    constructor(): this(DSL.name("users"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, UsersRecord>?, parentPath: InverseForeignKey<out Record, UsersRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, USERS, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class UsersPath : Users, Path<UsersRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, UsersRecord>?, parentPath: InverseForeignKey<out Record, UsersRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<UsersRecord>): super(alias, aliased)
        override fun `as`(alias: String): UsersPath = UsersPath(DSL.name(alias), this)
        override fun `as`(alias: Name): UsersPath = UsersPath(alias, this)
        override fun `as`(alias: Table<*>): UsersPath = UsersPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Advertisement.ADVERTISEMENT
    override fun getPrimaryKey(): UniqueKey<UsersRecord> = USERS_PKEY
    override fun getUniqueKeys(): List<UniqueKey<UsersRecord>> = listOf(USERS_PHONE_KEY)

    private lateinit var _refreshToken: RefreshTokenPath

    /**
     * Get the implicit to-many join path to the
     * <code>advertisement.refresh_token</code> table
     */
    fun refreshToken(): RefreshTokenPath {
        if (!this::_refreshToken.isInitialized)
            _refreshToken = RefreshTokenPath(this, null, REFRESH_TOKEN__REFRESH_TOKEN_USER_ID_FK.inverseKey)

        return _refreshToken;
    }

    val refreshToken: RefreshTokenPath
        get(): RefreshTokenPath = refreshToken()

    private lateinit var _usersRoles: UsersRolesPath

    /**
     * Get the implicit to-many join path to the
     * <code>advertisement.users_roles</code> table
     */
    fun usersRoles(): UsersRolesPath {
        if (!this::_usersRoles.isInitialized)
            _usersRoles = UsersRolesPath(this, null, USERS_ROLES__USER_ID_FK.inverseKey)

        return _usersRoles;
    }

    val usersRoles: UsersRolesPath
        get(): UsersRolesPath = usersRoles()
    override fun `as`(alias: String): Users = Users(DSL.name(alias), this)
    override fun `as`(alias: Name): Users = Users(alias, this)
    override fun `as`(alias: Table<*>): Users = Users(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Users = Users(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Users = Users(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Users = Users(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Users = Users(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Users = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Users = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Users = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Users = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Users = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Users = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Users = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Users = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Users = where(DSL.notExists(select))
}
